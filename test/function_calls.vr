type T {
    one :: Int;
    two :: Int;
}

func f1() :: Int {
    return 4711;
}

func f2() :: Int {
    return f1() - 1;
}

func f3() :: T {
    t :: T := new T;
    t.one := 1;
    t.two := 2;
    return t;
}

func f4(param :: Int) :: Int {
    return 2 * param;
}

func f5(param :: T) :: Int {
    return param.one + param.two;
}

func f6(param :: T) :: Void {
    param.one := 9;
    param.two := 9;
}

assert(4711 == f1());
assert(4710 == f2());

// Function that returns a user defined type 
t1 :: T := f3();
assert(1 == t1.one);
assert(2 == t1.two);

// With parameter
assert(4 == f4(2));

// With user defined type as parameter
t2 :: T := new T;
t2.one := 5;
t2.two := 6;
assert(11 == f5(t2));

// With anonymous parameter
assert(3 == f5(f3()));

// Function with side effect
t3 :: T := new T;
t2.one := 5;
// leave two uninitialized
f6(t3);
assert(9 == t3.one);
assert(9 == t3.two);

print("Success!");
